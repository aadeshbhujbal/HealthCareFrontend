name: Deploy Frontend

on:
  push:
    branches:
      - main
    paths:
      - 'HealthcareFrontend/HealthCareFrontend-Web/**'
      - '.github/workflows/deploy.yml'

env:
  SERVER_HOST: ishswami.in
  SERVER_USER: ubuntu
  FRONTEND_DEPLOY_PATH: /var/www/healthcare/frontend
  NODE_VERSION: '18.x'
  WORKING_DIRECTORY: HealthcareFrontend/HealthCareFrontend-Web

jobs:
  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install nx globally
        run: npm install -g nx

      - name: Create production env file
        run: |
          echo "VITE_API_URL=https://api.ishswami.in" > .env.production

      - name: Build
        run: npm run build

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          RELEASE_DIR="${{ env.FRONTEND_DEPLOY_PATH }}/releases/${TIMESTAMP}"

          # Create a new release directory
          ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${RELEASE_DIR}"

          # Upload the build
          if [ -d "dist" ]; then
            scp -i ~/.ssh/deploy_key -r dist/* ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${RELEASE_DIR}
          else
            echo "Build output directory not found"
            exit 1
          fi

          # Update the current symlink
          ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "cd ${{ env.FRONTEND_DEPLOY_PATH }} && \
            rm -f current && \
            ln -s releases/${TIMESTAMP} current"

          # Keep only the last 5 releases
          ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "cd ${{ env.FRONTEND_DEPLOY_PATH }}/releases && \
            ls -1t | tail -n +6 | xargs -r rm -rf"

      - name: Verify deployment
        run: |
          # Check if index.html exists in the new deployment
          ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "test -f ${{ env.FRONTEND_DEPLOY_PATH }}/current/index.html"

      - name: Rollback on failure
        if: failure()
        run: |
          # Get the previous release
          PREVIOUS_RELEASE=$(ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "ls -1t ${{ env.FRONTEND_DEPLOY_PATH }}/releases | sed -n 2p")

          if [ ! -z "$PREVIOUS_RELEASE" ]; then
            echo "Rolling back to previous release: $PREVIOUS_RELEASE"
            
            # Switch to previous release
            ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "cd ${{ env.FRONTEND_DEPLOY_PATH }} && \
              rm -f current && \
              ln -s releases/${PREVIOUS_RELEASE} current"
            
            # Verify rollback
            if ssh -i ~/.ssh/deploy_key ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "test -f ${{ env.FRONTEND_DEPLOY_PATH }}/current/index.html"; then
              echo "Rollback successful"
            else
              echo "Rollback failed - index.html not found"
              exit 1
            fi
          else
            echo "No previous release found for rollback"
            exit 1
          fi
