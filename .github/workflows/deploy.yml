name: Deploy Frontend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.19.0'
  SERVER_HOST: ishswami.in
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DEPLOY_PATH: /var/www/healthcare/frontend
  SERVER_IP: 82.208.20.16
  API_DOMAIN: api.ishswami.in
  NODE_ENV: production
  NX_BRANCH: ${{ github.event.number }}
  NX_RUN_GROUP: ${{ github.run_id }}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Yarn
        run: |
          corepack enable
          corepack prepare yarn@1.22.22 --activate
          yarn --version

      - name: Install root dependencies
        run: |
          yarn config set nodeLinker node-modules
          yarn install --frozen-lockfile
          yarn add -W -D @nx/js@20.6.1 @nx/next@20.6.1 @nx/react@20.6.1 @nx/workspace@20.6.1 nx@20.6.1
          yarn add -W -D webpack@5.89.0 @rspack/core@1.1.5 @swc/types@0.1.0 eslint@8.56.0
          yarn add -W -D @module-federation/enhanced@0.9.1 @module-federation/rspack@0.9.1
          yarn add -W date-fns@3.3.1

      - name: Install workspace dependencies
        run: |
          cd apps/web
          yarn add -D critters@0.0.20
          cd ../..
          cd shared/services
          yarn install --frozen-lockfile
          cd ../..

      - name: Create production env file
        run: |
          cat > apps/web/.env.production << EOL
          NEXT_PUBLIC_API_URL=https://${{ env.API_DOMAIN }}
          NEXT_PUBLIC_DOMAIN=${{ env.SERVER_HOST }}
          NODE_ENV=production
          EOL

      - name: Update Next.js config
        run: |
          cat > apps/web/next.config.js << EOL
          const { withNx } = require('@nx/next');

          const nextConfig = {
            nx: {
              svgr: false,
            },
            experimental: {
              optimizeCss: false,
              scrollRestoration: true,
            },
            output: 'export',
            images: {
              unoptimized: true,
            },
            trailingSlash: true,
            poweredByHeader: false,
            compress: true,
            generateEtags: true,
            reactStrictMode: true,
            swcMinify: true,
          };

          module.exports = withNx(nextConfig);
          EOL

      - name: Build shared services
        run: |
          yarn nx build shared-services

      - name: Build web application
        run: |
          yarn nx build web --configuration=production

      - name: Create deployment package
        run: |
          mkdir -p deployment
          if [ -d "dist/apps/web/exported" ]; then
            cp -r dist/apps/web/exported/* deployment/
          elif [ -d "apps/web/out" ]; then
            cp -r apps/web/out/* deployment/
          elif [ -d "dist/apps/web/.next" ]; then
            cp -r dist/apps/web/.next/* deployment/
          elif [ -d "apps/web/.next" ]; then
            cp -r apps/web/.next/* deployment/
          else
            echo "Could not find build output directory"
            exit 1
          fi

      - name: Optimize assets
        run: |
          if [ -d "deployment" ]; then
            # Install optimization tools
            npm install -g svgo
            
            # Optimize SVGs
            find deployment -name "*.svg" -exec svgo {} \;
            
            # Compress static assets
            find deployment -type f -name "*.js" -exec gzip -k {} \;
            find deployment -type f -name "*.css" -exec gzip -k {} \;
            find deployment -type f -name "*.html" -exec gzip -k {} \;
          fi

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            # Create deployment directory with timestamp
            mkdir -p ${{ env.DEPLOY_PATH }}/deployments
            cd ${{ env.DEPLOY_PATH }}/deployments
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p $timestamp
            echo $timestamp > ${{ env.DEPLOY_PATH }}/current_deployment

      - name: Upload deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          source: 'deployment/*'
          target: '${{ env.DEPLOY_PATH }}/deployments/$(date +%Y%m%d_%H%M%S)'
          strip_components: 1

      - name: Finalize deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            CURRENT_DEPLOY=$(cat current_deployment)

            # Update symlink to new deployment
            ln -sfn deployments/$CURRENT_DEPLOY current

            # Set proper permissions
            chmod -R 755 deployments/$CURRENT_DEPLOY

            # Verify deployment
            if [ -f "${{ env.DEPLOY_PATH }}/current/index.html" ]; then
              echo "Deployment successful - index.html found"
              
              # Clean old deployments but keep last 5
              cd deployments
              ls -t | tail -n +6 | xargs -r rm -rf
              
              exit 0
            else
              echo "Deployment failed - index.html not found"
              exit 1
            fi

  rollback:
    if: failure()
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}

            # Get previous deployment
            current=$(cat current_deployment)
            previous=$(ls -1 deployments | grep -v $current | tail -n 1)

            if [ ! -z "$previous" ]; then
              echo "Rolling back to deployment: $previous"
              
              # Switch to previous deployment
              ln -sfn deployments/$previous current
              echo $previous > current_deployment
              
              # Verify rollback
              if [ -f "${{ env.DEPLOY_PATH }}/current/index.html" ]; then
                echo "Rollback successful"
                exit 0
              else
                echo "Rollback failed - index.html not found"
                exit 1
              fi
            else
              echo "No previous deployment found for rollback"
              exit 1
            fi
